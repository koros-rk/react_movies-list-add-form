{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","validate","useState","Math","random","toFixed","slice","id","touched","setTouched","isValid","setIsValid","hasError","htmlFor","type","classNames","event","fieldValue","target","onBlur","pattern","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isReadyToSubmit","useMemo","hasContent","every","item","urlIsValid","url","test","reset","forEach","func","onSubmit","preventDefault","prevState","trim","onReset","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.773609d4.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validate?: (value: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  validate = () => true,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const [isValid, setIsValid] = useState(true);\n  const hasError = touched && required && !value;\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const fieldValue = event.target.value;\n\n    setIsValid(validate(fieldValue) || fieldValue === '');\n    onChange(fieldValue);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || !isValid,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleChange}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {!isValid && (\n        <p className=\"help is-danger\">{`${label} is incorrect`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\n// eslint-disable-next-line max-len\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const isReadyToSubmit = useMemo(() => {\n    const hasContent = [title, imgUrl, imdbUrl, imdbId]\n      .every(item => item !== '');\n    const urlIsValid = [imdbUrl, imgUrl]\n      .every(url => pattern.test(url));\n\n    return hasContent && urlIsValid;\n  }, [title, imgUrl, imdbUrl, imdbId]);\n\n  const reset = () => {\n    [setTitle, setDescription, setImgUrl, setImdbUrl, setImdbId]\n      .forEach(func => func(''));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setCount(prevState => prevState + 1);\n\n    onAdd({\n      title: title.trim(),\n      description: description.trim(),\n      imdbId: imdbId.trim(),\n      imdbUrl: imdbUrl.trim(),\n      imgUrl: imgUrl.trim(),\n    });\n\n    reset();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n      onReset={reset}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Img URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        validate={(value) => pattern.test(value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        validate={(value) => pattern.test(value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isReadyToSubmit}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState([...moviesFromServer]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={(movie) => {\n            setMovies(prevState => [...prevState, movie]);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}